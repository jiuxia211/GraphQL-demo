package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"
	"strconv"

	"github.com/jiuxia211/GraphQL-demo/db"
	"github.com/jiuxia211/GraphQL-demo/graph/model"
	"github.com/jiuxia211/GraphQL-demo/pkg/middleware"
	"github.com/jiuxia211/GraphQL-demo/pkg/utils"
	"gorm.io/gorm"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, userName string, password string, email string) (*model.User, error) {
	_, err := db.GetUserByUsername(ctx, userName)
	if err == gorm.ErrRecordNotFound { // 没注册过
		passwordHash, err := utils.HashPassword(password)
		if err != nil {
			return nil, err
		}
		userModel := &db.User{
			Username: userName,
			Password: passwordHash,
			Email:    email,
		}
		userResp, err := db.CreateUser(ctx, userModel)
		if err != nil {
			return nil, err
		}

		// id转string
		uid := strconv.FormatInt(userResp.ID, 10)
		return &model.User{
			ID:       uid,
			Username: userResp.Username,
			Email:    userResp.Email,
		}, nil
	} else if err != nil { // 出现了别的错误
		return nil, err
	} else { // 没有出错，说明找到了对应用户，用户已经注册过
		err = errors.New("用户已经存在")
		return nil, err
	}
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, userName string, password string) (*model.UserLogin, error) {
	userResp, err := db.GetUserByUsername(ctx, userName)
	if err != nil {
		return nil, err
	}
	isValid := utils.CheckPasswordHash(password, userResp.Password)
	if isValid {
		uid := strconv.FormatInt(userResp.ID, 10)
		token, err := utils.CreateToken(userResp.ID)
		if err != nil {
			return nil, err
		}
		return &model.UserLogin{
			ID:       uid,
			Username: userResp.Username,
			Email:    userResp.Email,
			Token:    token,
		}, nil
	} else {
		return nil, err
	}
}

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, title string, content string, status bool) (*model.Task, error) {
	claim := middleware.ForContext(ctx)
	if claim == nil {
		return nil, errors.New("unauthorized")
	}
	taskModel := &db.Task{
		Uid:     claim.UserId,
		Title:   title,
		Content: content,
		Status:  status,
	}
	taskResp, err := db.CreateTask(ctx, taskModel)
	if err != nil {
		return nil, err
	}

	// id转string
	tid := strconv.FormatInt(taskResp.ID, 10)
	return &model.Task{
		ID:      tid,
		Title:   taskResp.Title,
		Content: taskResp.Content,
		Status:  taskResp.Status,
	}, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, id string, title *string, content *string, status *bool) (*model.Task, error) {
	taskID, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	taskModel, err := db.GetTaskByID(ctx, taskID)
	if err != nil {
		return nil, err
	}
	if title != nil {
		taskModel.Title = *title
	}
	if content != nil {
		taskModel.Content = *content
	}
	if status != nil {
		taskModel.Status = *status
	}

	taskResp, err := db.UpdateTask(ctx, taskModel)
	if err != nil {
		return nil, err
	}

	return &model.Task{
		ID:      id,
		Title:   taskResp.Title,
		Content: taskResp.Content,
		Status:  taskResp.Status,
	}, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (string, error) {
	taskID, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return "", err
	}
	err = db.DeleteTask(ctx, taskID)
	if err != nil {
		return "", err
	}
	return "Task deleted successfully", nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id *string) (*model.User, error) {
	userID, err := strconv.ParseInt(*id, 10, 64)
	if err != nil {
		return nil, err
	}
	userResp, err := db.GetUserByID(ctx, userID)
	if err != nil {
		return nil, err
	}

	uid := strconv.FormatInt(userResp.ID, 10)
	return &model.User{
		ID:       uid,
		Username: userResp.Username,
		Email:    userResp.Email,
	}, nil
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id *string) (*model.Task, error) {
	taskID, err := strconv.ParseInt(*id, 10, 64)
	if err != nil {
		return nil, err
	}
	taskResp, err := db.GetTaskByID(ctx, taskID)
	if err != nil {
		return nil, err
	}

	tid := strconv.FormatInt(taskResp.ID, 10)
	return &model.Task{
		ID:      tid,
		Title:   taskResp.Title,
		Content: taskResp.Content,
		Status:  taskResp.Status,
	}, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	taskResps, err := db.GetAllTasks(ctx)
	if err != nil {
		return nil, err
	}

	var tasks []*model.Task
	for _, taskResp := range taskResps {
		tid := strconv.FormatInt(taskResp.ID, 10)
		tasks = append(tasks, &model.Task{
			ID:      tid,
			Title:   taskResp.Title,
			Content: taskResp.Content,
			Status:  taskResp.Status,
		})
	}
	return tasks, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
